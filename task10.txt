Task10:
Demonstrate Blue/Green and Canary deployment for the application.

Solution:

1) Blue/Green:
Blue/Green, basically a technique for releasing your application in a predictable manner with an goal of reducing any downtime associated with a release.
It’s a quick way to prime your app before releasing, and also quickly roll back if you find issues.

Simply, you have two identical environments (infrastructure) with the “green” environment hosting the current production apps:
Now, when you’re ready to make a change to app2 for example and upgrade it to v2, you’d do so in the “blue environment”.
In that environment you deploy the new version of the app, run smoke tests, and any other tests (including those to exercise/prime the OS, cache, CPU, etc).
When things look good, you change the loadbalancer/reverse proxy/router to point to the blue environment.
You monitor for any failures or exceptions because of the release. If everything looks good, you can eventually shut down the green environment and use it to stage any new releases. 
If not, you can quickly rollback to the green environment by pointing the loadbalancer back.

2) Canary:
Canary releases are a way of sending out a new version of your app into production that plays the role of a “canary” to get an idea of how it will perform (integrate with other apps, CPU, memory, disk usage, etc). 
It’s another release strategy that can mitigate the fact that regardless of the immense level of testing you do in lower environments you will still have some bugs in production. Canary releases let you test the waters before pulling the trigger on a full release.

